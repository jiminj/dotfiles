" Last edited: Jan 10. 2017
" Written by Jimin Jeon.
" clone this repository to $HOME/.vim (OSX) or $HOME/vimfiles (Windows) and
" :PluginInstall
"
" Ref: Errors on Windows git bash - https://github.com/VundleVim/Vundle.vim/wiki#e484-cant-open-file-cusersuseridappdatalocaltemp-error
"


let isWindows=has("win32") || has("win64")
let isMac=has("gui_macvim") || has("macunix") || has("mac")
let hasPythonSupport=has('python') || has('python3')
let $VIMHOME = '~/.vim'

if isWindows
  let $VIMHOME = '~/vimfiles'
  let &shell='cmd.exe'
  set shellslash
endif

set termguicolors

"=======================VimPlug settings=================================="

set nocompatible

" Install if VimPlug is not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin($VIMHOME.'/plugs')

Plug 'flazz/vim-colorschemes'

" vim-scripts repos
Plug 'vim-scripts/L9'

"============ Fugitive.vim ============
Plug 'tpope/vim-fugitive'
set diffopt+=vertical
":Git, :Gstatus, :Gcommit, :Gbrowse, :Gread, :Ggrep, :Gmove..

"============ Obsession.vim ==========
Plug 'tpope/vim-obsession'
"Manage working environment as sessions
":Obsess (with optional file/directory name) - to start recording to a session file 
":Obsess! - to stop and throw it away. 
"'vim -S, or :source - Load a session in the usual manner: it.


"============ Prosession.vim ==========
Plug 'dhruvasagar/vim-prosession'
"launch multiple vim instances for separate sessions (projects), 
"and simply switch between them with ease.
":Prosession {dir} - Switch to the existing directory or create a new session
let g:prosession_on_startup = 0

"============ vim-signify ============
Plug 'mhinz/vim-signify'

let g:signify_vcs_list              = [ 'git', 'hg' ]
let g:signify_cursorhold_insert     = 1
let g:signify_cursorhold_normal     = 1
let g:signify_update_on_bufenter    = 0
let g:signify_update_on_focusgained = 1
set updatetime=1000

"============ vim-indent-guides ============
Plug 'nathanaelkane/vim-indent-guides'

"============ NerdTree ============
" Open/Close    :NERDTreeToggle
" CheatSheet    https://www.cheatography.com/stepk/cheat-sheets/vim-nerdtree/
Plug 'scrooloose/nerdtree'
cabbrev ntt NERDTreeToggle
Plug 'Xuyuanp/nerdtree-git-plugin'
let NERDTreeShowHidden=1
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"============ NERDCommenter ============
"[count]<leader>c<space> |NERDComToggleComment|
"[count]<leader>cc |NERDComComment| Comment out the current line or text selected in visual mode.
"[count]<leader>cu |NERDComUncommentLine| Uncomments the selected line(s).
Plug 'scrooloose/nerdcommenter'

"map <A-/> <leader>c<space>
"if isWindows
"endif
"if isMac
  "map <A-/> <leader>c<space>
"endif

"============ Easymotion ============
" <leader><leader>wbjk
Plug 'Lokaltog/vim-easymotion'

""============ A.vim ===========
" For C/C++, https://github.com/vim-scripts/a.vim
" :A switches to the header file corresponding to the current file being edited (or vise versa)
" :AS splits and switches
" :AV vertical splits and switches
Plug 'vim-scripts/a.vim'

"============ vim-airline ============
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='molokai'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_tab_type = 1
"let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
let g:airline#extensions#tabline#show_close_button = 0

set laststatus=2

"============ MatchIt ============
"HTML/Latex TAG Matcher
Plug 'vim-scripts/matchit.zip'

"============ Tagbar ================"
Plug 'majutsushi/tagbar'

if isWindows
  let g:tagbar_ctags_bin=$VIMHOME.'/ctags.exe'
endif
cabbrev tt TagbarToggle

"============ Ultisnips ================"
"if hasPythonSupport
  "Plug 'SirVer/ultisnips'
  "Plug 'honza/vim-snippets'
  "let g:UltiSnipsJumpForwardTrigger="<tab>"
  "let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"endif

"============ autoformat ================"
"Plug 'Chiel92/vim-autoformat'

"============ CtrlP ================"
Plug 'ctrlpvim/ctrlp.vim'
" :help ctrlp-mappings
" <c-f> and <c-b> to cycle between modes.
" <c-d> to switch to filename only search instead of full path.
" Use <c-j>, <c-k> or the arrow keys to navigate the result list.

"============ YouCompleteMe ================"
"if hasPythonSupport
  "Plug 'Valloric/YouCompleteMe', {'do': 'sudo python3 ./install.py --clangd-completer --ts-completer --java-completer'}
  "Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
  "Plug 'ervandew/supertab'

  ""Generate the config file :YcmGenerateConfig

  "let g:SuperTabDefaultCompletionType = '<C-n>'
  "let g:ycm_global_ycm_extra_conf= $VIMHOME.'/plugs/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
  "let g:ycm_python_binary_path = 'python'
  "let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
  "let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
  "let g:ycm_confirm_extra_conf=0
  "let g:ycm_goto_buffer_command = 'horizontal-split'
  "let g:ycm_autoclose_preview_window_after_insertion = 1
  "let g:ycm_add_preview_to_completeopt = 1
  "nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
  "nnoremap <leader>yd :YcmCompleter GoToDeclaration<CR>
  "nnoremap <leader>yg :YcmCompleter GoTo<CR>
  "nnoremap <leader>yr :YcmCompleter GoToReferences<CR>
  "nnoremap <leader>yi :YcmCompleter GoToImplementation<CR>
  "nnoremap <leader>yt :YcmCompleter GetType<CR>
  "nnoremap <leader>yp :YcmCompleter GetParent<CR>
  "nnoremap <leader>yc :YcmCompleter GetDoc<CR>
  "nnoremap <leader>yf :YcmCompleter FixIt<CR>
  "cabbrev ycd YcmDiags
  "cabbrev yc YcmCompleter
  "cabbrev yg YcmCompleter GoTo
  "cabbrev ygd YcmCompleter GoToDeclaration
  "cabbrev ygr YcmCompleter GoToReferences
  "cabbrev ygi YcmCompleter GoToImplementation
  "cabbrev yt YcmCompleter GetType
  "cabbrev yp YcmCompleter GetParent
  "cabbrev yfmt YcmCompleter Format
  "cabbrev yfix YcmCompleter FixIt
  "cabbrev yrn YcmCompleter RefactorRename
  "cabbrev ydoc YcmCompleter GetDoc
"endif

"   https://github.com/Valloric/YouCompleteMe
"   https://github.com/rdnetto/YCM-Generator
"
"   The way to compile
"   cd ~/.vim/bundle/YouCompleteMe
"   ./install.py --all
"
"
"============ Coc.nvim ================"
" Use release branch (Recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release',
  \'do' : ':CocInstall coc-tsserver coc-json coc-html coc-css coc-python coc-snippets coc-prettier coc-clangd coc-java coc-cmake coc-yaml'}

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> ga  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> ge  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> gc  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> go  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> gs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> gj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> gk  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> gp  :<C-u>CocListResume<CR>

"============ Ack.vim ================"
Plug 'mileszs/ack.vim'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
cnoreabbrev Ack Ack!

":Ack [options] {pattern} [{directories}]}
"?    a quick summary of these keys, repeat to close
"o    to open (same as Enter)
"O    to open and close the quickfix window
"go   to preview file, open but maintain focus on ack.vim results
"t    to open in new tab
"T    to open in new tab without moving to it
"h    to open in horizontal split
"H    to open in horizontal split, keeping focus on the results
"v    to open in vertical split
"gv   to open in vertical split, keeping focus on the results
"q    to close the quickfix window

"============ Vim-Better-Whitespace ================"
Plug 'ntpeters/vim-better-whitespace'


"============ Vim-graphql ================"
Plug 'jparise/vim-graphql'


"============ Delimitmate ================"
"Automatic closing of parenthesis, quotes and brackets
Plug 'raimondi/delimitMate'

"============ Emmet ================"
" Trigger: <C-y>,
Plug 'mattn/emmet-vim'
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

"============ Markdown ================"
Plug 'tpope/vim-markdown'
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'cpp']

Plug 'suan/vim-instant-markdown'
let g:instant_markdown_slow = 1
"Install - https://github.com/suan/vim-instant-markdown 


call plug#end()

"" ...
filetype plugin indent on     " required!
"
" Brief help
" PlugInstall [name ...] [#threads]	Install plugins
" PlugUpdate [name ...] [#threads]	Install or update plugins
" PlugClean[!]	Remove unused directories (bang version will clean without prompt)
" PlugUpgrade	Upgrade vim-plug itself
" PlugStatus	Check the status of plugins
" PlugDiff	Examine changes from the previous update and the pending changes
" PlugSnapshot[!] [output path]	Generate script for restoring the current snapshot of the plugins

"======================================================================="

syntax on
filetype plugin on

set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,euc-kr,cp949
map <space> <leader>
"for easymotion
map <space><space> <leader><leader>

set t_Co=256
"set background=dark

if isMac
  set gfn=Menlo\ For\ Powerline:h12
endif

if isWindows
  set langmenu=en_US.utf-8
  set gfn=Dejavu\ Sans\ Mono\ For\ Powerline:h10
  let $LANG = 'en_US.UTF-8'
  source $VIMRUNTIME/delmenu.vim
  source $VIMRUNTIME/menu.vim
  source $VIMRUNTIME/mswin.vim
  behave mswin
endif

" FOR WINDOWS - bash
if !empty($ConEmuBaseDir)
  set termencoding=utf-8
  inoremap <Char-0x07f> <BS>
  nnoremap <Char-0x07F> <BS>

  let &t_ti.="\e[1 q"
  let &t_SI.="\e[5 q"
  let &t_EI.="\e[1 q"
  let &t_te.="\e[0 q"

  "Cmd
  if isWindows
    set term=xterm
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
  endif

endif

color zenburn

set list
"set listchars=tab:▸\ ,space:·,trail:·,nbsp:·,eol:¬
set listchars=tab:▸\ ,space:·,nbsp:·,eol:¬
"set listchars=tab:▸\ ,eol:¬
hi clear SpecialKey
hi! link SpecialKey NonText

"set nocp
set number
set cursorline
set expandtab
set shiftwidth=2 "sw"
set tabstop=2 "ts"
set softtabstop=2 "sts"
set smartindent
set hlsearch
set ignorecase
set smartcase
set showmatch
set foldmethod=marker
set ttymouse=xterm2
set mouse=a

"set background color to columns over 120
highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn="80,".join(range(120,999),",")

set noimd
set iminsert=1
set imsearch=-1

"no bells
set noerrorbells
set vb t_vb=

"buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

"tabs
nnoremap <silent> [t :tabprevious<CR>
nnoremap <silent> ]t :tabnext<CR>
nnoremap <silent> [T :tabfirst<CR>
nnoremap <silent> ]T :tablast<CR>

"for ctags
set tags=tags;/

"" ============ YouCompletMe ================"
"let g:ycm_path_to_python_interpreter = ''

augroup autoreload_vimrc " {{{
  autocmd!
  autocmd BufWritePost $MYVIMRC nested source $MYVIMRC
augroup END " }}}

