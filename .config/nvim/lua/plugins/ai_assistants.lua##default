---@type LazySpec
return {
  {
    "zbirenbaum/copilot.lua",
    opts = function(_, _)
      return {
        suggestion = {
          enabled = true,
          auto_trigger = true,
          debounce = 150,
          keymap = {
            accept = "<M-l>",
            accept_word = false,
            accept_line = false,
            next = "<M-]>",
            prev = "<M-[>",
            dismiss = "<C-]>",
          },
        },
        -- panel = {
        --   enabled = true,
        --   auto_refresh = true,
        -- },
      }
    end,
    -- keys = {
    --   { "<leader>lc", "<cmd>Copilot panel<cr>", desc = "Panel" },
    -- },
  },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    branch = "main",
    -- cmd = { "ChatGPT", "ChatGPTActAs", "ChatGPTCompleteCode", "ChatGPTEditWithInstructions", "ChatGPTRun" },
    dependencies = {
      { "zbirenbaum/copilot.lua" }, -- or github/copilot.vim
      { "nvim-lua/plenary.nvim" }, -- for curl, log wrapper
      {
        "AstroNvim/astrocore",
        opts = function(_, opts)
          local maps = opts.mappings
          local prefix = "<Leader>C"
          maps.n[prefix] = { desc = require("astroui").get_icon("CopilotChat", 1, true) .. "CopilotChat" }
          maps.v[prefix] = { desc = require("astroui").get_icon("CopilotChat", 1, true) .. "CopilotChat" }

          maps.n[prefix .. "m"] = { "<cmd>CopilotChatModels<CR>", desc = "Select model" }
          maps.n[prefix .. "r"] = { "<cmd>CopilotChatReset<CR>", desc = "Reset chat window" }

          maps.n[prefix .. "c"] = { "<cmd>CopilotChatToggle<CR>", desc = "Toggle CopilotChat" }
          maps.v[prefix .. "c"] = { "<cmd>CopilotChatToggle<CR>", desc = "Toggle CopilotChat" }

          maps.n[prefix .. "d"] = { "<cmd>CopilotChatDebugInfo<CR>", desc = "Show debuginfo" }
          maps.v[prefix .. "d"] = { "<cmd>CopilotChatDebugInfo<CR>", desc = "Show debuginfo" }

          maps.n[prefix .. "e"] = { "<cmd>CopilotChatExplain<CR>", desc = "Explain this line" }
          maps.v[prefix .. "e"] = { "<cmd>CopilotChatExplain<CR>", desc = "Explain selection" }

          maps.n[prefix .. "R"] = { "<cmd>CopilotChatReview<CR>", desc = "Review this line" }
          maps.v[prefix .. "R"] = { "<cmd>CopilotChatReview<CR>", desc = "Review selection" }

          maps.n[prefix .. "f"] = { "<cmd>CopilotChatFix<CR>", desc = "Fix this line" }
          maps.v[prefix .. "f"] = { "<cmd>CopilotChatFix<CR>", desc = "Fix selection" }

          maps.n[prefix .. "o"] = { "<cmd>CopilotChatOptimize<CR>", desc = "Optimize this line" }
          maps.v[prefix .. "o"] = { "<cmd>CopilotChatOptimize<CR>", desc = "Optimize selection" }

          maps.n[prefix .. "d"] = { "<cmd>CopilotChatDocs<CR>", desc = "Add documentation comment for this line" }
          maps.v[prefix .. "d"] = { "<cmd>CopilotChatDocs<CR>", desc = "Add documentation comment for the selection" }

          maps.n[prefix .. "t"] = { "<cmd>CopilotChatTest<CR>", desc = "Generate tests for this line" }
          maps.v[prefix .. "t"] = { "<cmd>CopilotChatTest<CR>", desc = "Generate tests for the selection" }

          maps.n[prefix .. "F"] = { "<cmd>CopilotChatFixDiagnostic<CR>", desc = "Fix diagnostic issue in file" }
          maps.n[prefix .. "C"] = { "<cmd>CopilotChatCommit<CR>", desc = "Write commit message for the change" }
          maps.n[prefix .. "S"] =
            { "<cmd>CopilotChatCommitStaged<CR>", desc = "Write commit message for the staged change" }
        end,
      },
      { "AstroNvim/astroui", opts = { icons = { CopilotChat = "î°ž" } } },
    },
    opts = {
      debug = true, -- Enable debugging
      -- See Configuration section for rest
    },
  },
}
